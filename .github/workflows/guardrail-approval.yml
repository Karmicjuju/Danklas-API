name: Guardrail Approval Workflow

on:
  pull_request:
    paths:
      - 'app/guardrails.py'
      - 'guardrails/**'
      - '**/*guardrail*'
      - '.github/workflows/guardrail-approval.yml'

jobs:
  guardrail-validation:
    name: Validate Guardrail Changes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Validate guardrail configuration format
        run: |
          poetry run python -c "
          from app.guardrails import GuardrailManager, DEFAULT_GUARDRAIL
          import json
          
          manager = GuardrailManager()
          
          # Validate default guardrail
          if not manager.validate_guardrail(DEFAULT_GUARDRAIL):
              print('‚ùå Default guardrail validation failed')
              exit(1)
          else:
              print('‚úÖ Default guardrail validation passed')
          
          # Calculate and display checksum
          checksum = manager._calculate_checksum(DEFAULT_GUARDRAIL)
          print(f'üìã Default guardrail checksum: {checksum}')
          
          # Pretty print the guardrail for review
          print('üìÑ Guardrail configuration:')
          print(json.dumps(DEFAULT_GUARDRAIL, indent=2))
          "

      - name: Check for guardrail changes
        run: |
          echo "## üõ°Ô∏è Guardrail Configuration Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if guardrail files have changed
          if git diff --name-only origin/main...HEAD | grep -E "(guardrail|app/guardrails\.py)"; then
            echo "‚ö†Ô∏è **Guardrail-related files have been modified. This requires security team approval.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Modified Files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only origin/main...HEAD | grep -E "(guardrail|app/guardrails\.py)" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Review Checklist:" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Content filters are properly configured" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Output filters prevent data leakage" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Query filters block malicious inputs" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Bedrock configuration follows security guidelines" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Changes have been tested in development environment" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Security team has approved the changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No guardrail configuration files were modified in this PR." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run guardrail tests
        run: |
          poetry run pytest tests/ -v -k "guardrail" || echo "No specific guardrail tests found"

  require-approval:
    name: Require CODEOWNERS Approval
    runs-on: ubuntu-latest
    needs: guardrail-validation
    if: contains(github.event.pull_request.changed_files, 'guardrail') || contains(github.event.pull_request.changed_files, 'app/guardrails.py')
    
    steps:
      - name: Check for required approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const guardrailFiles = files.filter(file => 
              file.filename.includes('guardrail') || 
              file.filename === 'app/guardrails.py'
            );
            
            if (guardrailFiles.length > 0) {
              const approvedReviews = reviews.filter(review => 
                review.state === 'APPROVED'
              );
              
              if (approvedReviews.length === 0) {
                core.setFailed('‚ùå Guardrail changes require explicit approval from CODEOWNERS before merging.');
              } else {
                console.log('‚úÖ Required approvals found for guardrail changes.');
              }
            }

  security-notification:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: guardrail-validation
    if: contains(github.event.pull_request.changed_files, 'guardrail') || contains(github.event.pull_request.changed_files, 'app/guardrails.py')
    
    steps:
      - name: Create security review comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## üõ°Ô∏è Security Review Required
            
            This PR modifies guardrail configurations which require security team review.
            
            **@security-team** Please review the following:
            
            1. **Content Filters**: Verify hate speech, violence, and inappropriate content filters
            2. **Output Filters**: Check PII detection and response filtering
            3. **Query Filters**: Validate injection detection and malicious intent filtering
            4. **Bedrock Configuration**: Review model settings and retrieval parameters
            
            **Security Checklist:**
            - [ ] All filter thresholds are appropriate for production use
            - [ ] No security controls have been weakened
            - [ ] Changes align with security policies
            - [ ] Testing has been performed in a secure environment
            
            Please approve this PR after completing your security review.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            }); 